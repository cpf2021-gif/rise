// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
	"strings"
	"time"
)

const getUserByID = `-- name: GetUserByID :one
SELECT id, user_name, create_time, update_time FROM user 
WHERE id = ?
`

type GetUserByIDRow struct {
	ID         int32
	UserName   string
	CreateTime time.Time
	UpdateTime time.Time
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (*GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return &i, err
}

const getUserByIDs = `-- name: GetUserByIDs :many
SELECT id, user_name, create_time, update_time FROM user
WHERE id IN (/*SLICE:ids*/?)
`

type GetUserByIDsRow struct {
	ID         int32
	UserName   string
	CreateTime time.Time
	UpdateTime time.Time
}

func (q *Queries) GetUserByIDs(ctx context.Context, ids []int32) ([]*GetUserByIDsRow, error) {
	query := getUserByIDs
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetUserByIDsRow
	for rows.Next() {
		var i GetUserByIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :execlastid
INSERT INTO user (user_name) VALUES (?)
`

func (q *Queries) InsertUser(ctx context.Context, userName string) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertUser, userName)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}
